/* Adaptive inset button mixin
   Uses a base (background) color to create an inset-looking pill button.
   
   Copyright Jason Rosoff 2011 - http://shipordie.com
*/

#adaptive-inset-button {
    
    @css-pie: "/css/PIE/PIE.htc";
    
    // Basic Functions
    
    .rounded-corners (@radius: 2em) {
        -moz-border-radius: @radius;
        -webkit-border-radius: @radius;
        border-radius: @radius;
    }
    
    .top-bottom-gradient (@start, @stop) {
        background: -webkit-gradient(linear, left top, left bottom, color-stop(0, @start), color-stop(1, @stop));
        background: -moz-linear-gradient(top, @start, @stop);
        background: linear-gradient(top, @start, @stop);
    }
    
    .box-shadow (@x: 0, @y: 0, @blur: 0, @color: #000) {
        -moz-box-shadow: @arguments;
        -webkit-box-shadow: @arguments;
        box-shadow: @arguments;
    }
    
    // Button Styles
    
    .button-colors(dark, @base-color) {
        color: lighten(@base-color, 60%);
        text-shadow: 0 -1px 0 darken(@base-color, 50%);
        border: 1px solid darken(@base-color, 20%);
            
        .top-bottom-gradient(lighten(@base-color, 7%), lighten(@base-color, 3%));
        .box-shadow(0, 1px, 0, lighten(@base-color, 10%));
        
        &:after  { border-top: 1px solid lighten(@base-color, 15%); }
        &:hover  { .top-bottom-gradient(lighten(@base-color, 10%), lighten(@base-color, 5%)); behavior: ~"url(@{css-pie})"; }
        &:active { .top-bottom-gradient(lighten(@base-color, 5%), lighten(@base-color, 10%)); behavior: ~"url(@{css-pie})"; }
    }
    
    .button-colors(light, @base-color) {
        color: darken(@base-color, 60%);
        text-shadow: 0 1px 0 lighten(@base-color, 15%);
        border: 1px solid darken(@base-color, 40%);
            
        .top-bottom-gradient(darken(@base-color, 1%), darken(@base-color, 5%));
        .box-shadow(0, 1px, 0, lighten(@base-color, 15%));
        
        &:after  { border-top: 1px solid lighten(@base-color, 15%); }
        &:hover  { .top-bottom-gradient(darken(@base-color, 3%), darken(@base-color, 8%)); behavior: ~"url(@{css-pie})"; }
        &:active { .top-bottom-gradient(darken(@base-color, 8%), lighten(@base-color, 3%)); behavior: ~"url(@{css-pie})"; }
    }
    
    .inset-button (@base-color: #666, @border-radius: 2em) {
        display: inline-block;
        padding: .5 * @border-radius @border-radius;
        position: relative;
        text-decoration: none;
        
        .rounded-corners(@border-radius);
        
        &:after {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            content: " ";
            
            .rounded-corners(@border-radius);
            behavior: ~"url(@{css-pie})";
        }
        
        // Calculate the lightness of the background color and use that to sest the rest
        // of the button colors. Perceived luminances is a bit of a fudge because it doesn't 
        // properly weight the differences in how humans see RGB light, but it's close.
           
        @theLight: lightness(@base-color);
        @perceived-luminance: ~`parseInt('@{theLight}') > 65 ? 'light' : 'dark'`;
        .button-colors(@perceived-luminance, @base-color);
        behavior: ~"url(@{css-pie})";
    }
}